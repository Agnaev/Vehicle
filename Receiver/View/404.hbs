<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404</title>    
    <style>
        canvas {
            margin: 0%;
            overflow: hidden;
             /** background: rgb(17, 17, 19); */
            top: 0;
            left: 0;
            position: absolute;
            z-index: -100;
        }
        body {
            color: white;
        }
        .container {
            position: relative;
        }
        .nested-content {
            position: absolute;
            top: 50%;
            left: 50%;
            height: 30%;
            width: 50%;
            margin: -15% 0 0 -25%;
        }
        h1, .error-container, .buttons {
            text-align: center;
        }
        .buttons button {
            border: 1px solid black;
            padding: 10px 20px;
            background: red;
            border-radius: 15px;
        }
        .buttons button:hover {
            cursor: grab;
        }
    </style>
</head>

<body>
    <div class="content">
        <div class="nested-container">
            <h1>404 ошибка</h1>
            <div class="error-container">
                {{ exc }}
            </div>
            <div class="buttons">
                <button class="href">На главную</button>
            </div>
        </div>
    </div>

    <script>
        'use strict';
        document.querySelector('.href').addEventListener('click', e => location.href = location.origin);

        (() => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            let w = canvas.width = innerWidth;
            let h = canvas.height = innerHeight;
            const particles = [];
            const properties = {
                bgColor: 'rgba(40, 40, 40, 1)',
                particleColor: 'rgba(255, 40, 40, 1)',
                particleRadius: 3,
                particleCount: 60,
                particleMaxVelocity: 1,
                lineLength: 200,
                particleLife: 6,
            };

            document.querySelector('body').appendChild(canvas);

            window.onresize = function () {
                w = canvas.width = innerWidth;
                h = canvas.height = innerHeight;
            };

            const draw = (fn, beforebegin, afterBegin) => {
                if (!(fn instanceof Function)) {
                    return new Error('fn is not a function')
                }
                if (beforebegin && beforebegin instanceof Function) {
                    beforebegin()
                }
                ctx.beginPath();
                fn();
                ctx.closePath();
                if (afterBegin && afterBegin instanceof Function) {
                    afterBegin();
                }
            };

            class Particle {
                constructor() {
                    this.x = Math.random() * w;
                    this.y = Math.random() * h;
                    this.velocityX = Math.random() * (properties.particleMaxVelocity * 2) - properties.particleMaxVelocity;
                    this.velocityY = Math.random() * (properties.particleMaxVelocity * 2) - properties.particleMaxVelocity;
                    this.life = Math.random() * properties.particleLife * 60;
                }
                
                position() {
                    this.x + this.velocityX > w && this.velocityX > 0 || this.x + this.velocityX < 0 && this.velocityX < 0 ? this.velocityX *= -1 : this.velocityX;
                    this.y + this.velocityY > h && this.velocityY > 0 || this.y + this.velocityY < 0 && this.velocityY < 0 ? this.velocityY *= -1 : this.velocityY;
                    this.x += this.velocityX;
                    this.y += this.velocityY;
                }

                reDraw() {
                    draw(() => {
                        ctx.arc(this.x, this.y, properties.particleRadius, 0, Math.PI * 2);
                    },
                    null,
                    () => {
                        ctx.fillStyle = properties.particleColor
                        ctx.fill()
                    });
                }

                reCalculateLife() {
                    if (this.life < 1) {
                        this.x = Math.random() * w;
                        this.y = Math.random() * h;
                        this.velocityX = Math.random() * (properties.particleMaxVelocity * 2) - properties.particleMaxVelocity;
                        this.velocityY = Math.random() * (properties.particleMaxVelocity * 2) - properties.particleMaxVelocity;
                        this.life = Math.random() * properties.particleLife * 60;
                    }
                    this.life--;
                }
            }

            const reDrawBackground = () => {
                ctx.fillStyle = properties.bgColor;
                ctx.fillRect(0, 0, w, h);
            };

            const drawLines = () => {
                let x1, y1, x2, y2, length, opacity;
                for (const particle_i of particles) {
                    for (const particle_j of particles.filter(x => x != particle_i)) {
                        x1 = particle_i.x;
                        y1 = particle_i.y;
                        x2 = particle_j.x;
                        y2 = particle_j.y;
                        length = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                        if (length < properties.lineLength) {
                            opacity = 1 - length / properties.lineLength;
                            draw(() => {
                                ctx.moveTo(x1, y1)
                                ctx.lineTo(x2, y2)
                            },
                            () => {
                                ctx.lineWidth = '0.5';
                                ctx.strokeStyle = `rgba(255, 40, 40, ${opacity})`;
                            },
                            () => ctx.stroke())
                        }
                    }
                }
            };

            const reDrawParticles = () => {
                for (const particle of particles) {
                    particle.reCalculateLife();
                    particle.position();
                    particle.reDraw();
                }
            };

            for (let i = 0; i < properties.particleCount; i++) {
                particles.push(new Particle());
            }

            (function myloop() {
                reDrawBackground();
                reDrawParticles();
                drawLines();
                requestAnimationFrame(myloop);
            })();
        })();
    </script>
</body>

</html>
